import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { selectUser } from "../../redux/slices/authSlice";
import walletService from "../../services/walletService";
import withdrawalService from "../../services/withdrawalService";
import jsPDF from "jspdf";
import { toast } from "react-hot-toast";

const WalletAndWithdrawl = ({ darkMode }) => {
  const user = useSelector(selectUser);
  const [withdrawAmount, setWithdrawAmount] = useState("");
  const [wallet, setWallet] = useState(null);
  const [loading, setLoading] = useState(true);
  const [withdrawals, setWithdrawals] = useState([]);
  const [loadingWithdrawals, setLoadingWithdrawals] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    if (user?._id) {
      fetchWallet();
      fetchWithdrawals();
    }
  }, [user]);

  const fetchWallet = async () => {
    try {
      setLoading(true);
      const response = await walletService.getWalletByUserId(user._id);
      if (response.success) {
        setWallet(response.data);
      }
    } catch (error) {
      console.error('Error fetching wallet:', error);
      toast.error(error.message || "Failed to fetch wallet");
    } finally {
      setLoading(false);
    }
  };

  const fetchWithdrawals = async () => {
    try {
      setLoadingWithdrawals(true);
      const response = await withdrawalService.getWithdrawalsByUserId(user._id, {
        sortBy: 'requestDate',
        order: 'desc'
      });
      if (response.success) {
        setWithdrawals(response.data.withdrawals);
      }
    } catch (error) {
      console.error('Error fetching withdrawals:', error);
      toast.error(error.message || "Failed to fetch withdrawals");
    } finally {
      setLoadingWithdrawals(false);
    }
  };

  const generateReceipt = (withdrawal) => {
    const canvas = document.createElement('canvas');
    canvas.width = 800;
    canvas.height = 1000;
    const ctx = canvas.getContext('2d');

    // Background
    ctx.fillStyle = '#ffffff';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Header
    ctx.fillStyle = '#2563eb';
    ctx.fillRect(0, 0, canvas.width, 120);

    // Company Name
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 36px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('WITHDRAWAL RECEIPT', canvas.width / 2, 70);

    // Receipt ID
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 24px Arial';
    ctx.textAlign = 'left';
    ctx.fillText(`Receipt ID: ${withdrawal.withdrawalId}`, 60, 180);

    // Date
    ctx.font = '18px Arial';
    ctx.fillStyle = '#64748b';
    const formattedDate = new Date(withdrawal.requestDate).toLocaleDateString('en-IN');
    ctx.fillText(`Date: ${formattedDate}`, 60, 220);

    // Divider
    ctx.strokeStyle = '#e2e8f0';
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(60, 260);
    ctx.lineTo(740, 260);
    ctx.stroke();

    // Details Section
    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 20px Arial';
    ctx.fillText('WITHDRAWAL DETAILS', 60, 310);

    ctx.font = '18px Arial';
    ctx.fillStyle = '#475569';
    
    ctx.fillText('Amount:', 60, 360);
    ctx.font = 'bold 24px Arial';
    ctx.fillStyle = '#2563eb';
    ctx.fillText(`₹${withdrawal.amount.toFixed(2)} INR`, 60, 395);

    ctx.font = '18px Arial';
    ctx.fillStyle = '#475569';
    ctx.fillText('Status:', 60, 450);
    
    // Status badge
    const statusColor = withdrawal.status === 'approved' ? '#22c55e' : 
                       withdrawal.status === 'pending' ? '#eab308' : '#ef4444';
    ctx.fillStyle = statusColor;
    ctx.fillRect(60, 465, 150, 35);
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(withdrawal.status.toUpperCase(), 135, 488);
    ctx.textAlign = 'left';

    ctx.font = '18px Arial';
    ctx.fillStyle = '#475569';
    ctx.fillText('Reason:', 60, 545);
    ctx.fillStyle = '#1e293b';
    ctx.fillText(withdrawal.reason, 60, 575);

    // Divider
    ctx.strokeStyle = '#e2e8f0';
    ctx.beginPath();
    ctx.moveTo(60, 630);
    ctx.lineTo(740, 630);
    ctx.stroke();

    // Footer
    ctx.fillStyle = '#64748b';
    ctx.font = '16px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('This is an automated receipt generated by the system.', canvas.width / 2, 700);
    ctx.fillText('For any queries, please contact support.', canvas.width / 2, 730);
    
    ctx.fillStyle = '#94a3b8';
    ctx.font = '14px Arial';
    ctx.fillText('Thank you for using our service!', canvas.width / 2, 800);

    // Border
    ctx.strokeStyle = '#cbd5e1';
    ctx.lineWidth = 3;
    ctx.strokeRect(0, 0, canvas.width, canvas.height);

    return canvas.toDataURL('image/png');
  };

  const downloadReceipt = (withdrawal) => {
    const dataUrl = generateReceipt(withdrawal);
    const link = document.createElement('a');
    link.download = `withdrawal-receipt-${withdrawal.withdrawalId}.png`;
    link.href = dataUrl;
    link.click();
  };

  const handleWithdraw = async () => {
    const amount = parseFloat(withdrawAmount);

    // Validation
    if (!amount || amount <= 0) {
      toast.error("Please enter a valid amount");
      return;
    }

    if (!wallet || wallet.balance < amount) {
      toast.error("Insufficient balance");
      return;
    }

    try {
      setSubmitting(true);
      const response = await withdrawalService.createWithdrawalRequest({
        userId: user._id,
        amount: amount,
        bankDetails: {
          // You can add bank details from user profile here if needed
        }
      });

      if (response.success) {
        toast.success("Withdrawal request submitted successfully!");
        setWithdrawAmount("");
        // Refresh data
        fetchWithdrawals();
        // Note: Wallet balance won't change until admin approves
      }
    } catch (error) {
      console.error("Error creating withdrawal:", error);
      toast.error(error.message || "Failed to submit withdrawal request");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div
      className={`min-h-screen px-4 sm:px-6 md:px-10 transition-all duration-300 ${
        darkMode ? "bg-gray-900 text-white" : "bg-gray-50 text-gray-900"
      }`}
      style={{ paddingTop: "2.5rem", paddingBottom: "4rem" }}
    >
      <div className="max-w-6xl mx-auto space-y-8">
        {/* Balance Card */}
        <div
          className={`border rounded-2xl p-6 sm:p-8 shadow-sm text-center sm:text-left ${
            darkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
          }`}
        >
          <p className="text-sm text-gray-500 mb-1">Current Available Balance</p>
          {loading ? (
            <h2 className="text-4xl font-semibold mb-1">Loading...</h2>
          ) : (
            <>
              <h2 className="text-4xl font-semibold mb-1">₹{wallet?.balance?.toFixed(2) || '0.00'}</h2>
              <p className="text-xs text-gray-400">
                Total Earned: ₹{wallet?.totalEarned?.toFixed(2) || '0.00'} | 
                Total Withdrawn: ₹{wallet?.totalWithdrawn?.toFixed(2) || '0.00'}
              </p>
            </>
          )}
        </div>

        {/* Withdrawal Section */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Left - Initiate Withdrawal */}
          <div
            className={`border rounded-2xl p-6 sm:p-8 shadow-sm ${
              darkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
            }`}
          >
            <h3 className="text-lg font-semibold mb-4">Initiate Withdrawal</h3>
            <label className="block text-sm mb-2 text-gray-500">
              Amount to Withdraw (INR)
            </label>
            <input
              type="text"
              value={withdrawAmount}
              onChange={(e) => setWithdrawAmount(e.target.value)}
              placeholder="e.g., 500.00"
              disabled={submitting}
              className={`w-full p-3 border rounded-md mb-4 text-sm outline-none ${
                darkMode
                  ? "bg-gray-900 border-gray-700 text-white placeholder-gray-400"
                  : "bg-white border-gray-300 text-gray-900 placeholder-gray-500"
              } ${submitting ? 'opacity-50 cursor-not-allowed' : ''}`}
            />
            <button
              onClick={handleWithdraw}
              disabled={submitting || !wallet || wallet.balance <= 0}
              className="w-full py-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 font-medium transition disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {submitting ? 'SUBMITTING...' : 'REQUEST WITHDRAWAL'}
            </button>
          </div>

          {/* Right - Important Note */}
          <div
            className={`border rounded-2xl p-6 sm:p-8 shadow-sm ${
              darkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
            }`}
          >
            <h3 className="text-lg font-semibold mb-4">Important Note</h3>
            <p className="text-sm text-gray-500 leading-relaxed">
              All withdrawal requests are subject to admin review and approval,
              and will be processed within 24–48 hours. <br />
              <br />
              Please ensure your bank details are updated in your profile
              settings to avoid delays.
            </p>
          </div>
        </div>

        {/* Withdrawal History Table */}
        <div
          className={`border rounded-2xl p-6 sm:p-8 shadow-sm ${
            darkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"
          }`}
        >
          <h3 className="text-lg font-semibold mb-4">Withdrawal History</h3>

          {loadingWithdrawals ? (
            <p className="text-center py-4 text-gray-500">Loading withdrawals...</p>
          ) : withdrawals.length === 0 ? (
            <p className="text-center py-4 text-gray-500">No withdrawal history found</p>
          ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm border-collapse">
              <thead>
                <tr
                  className={`text-left ${
                    darkMode ? "bg-gray-700 text-gray-200" : "bg-gray-100 text-gray-700"
                  }`}
                >
                  <th className="py-3 px-4 font-semibold whitespace-nowrap">Request ID</th>
                  <th className="py-3 px-4 font-semibold whitespace-nowrap">Amount (INR)</th>
                  <th className="py-3 px-4 font-semibold whitespace-nowrap">Date</th>
                  <th className="py-3 px-4 font-semibold whitespace-nowrap">Status</th>
                  <th className="py-3 px-4 font-semibold whitespace-nowrap">Reason</th>
                  <th className="py-3 px-4 font-semibold whitespace-nowrap">Receipt</th>
                </tr>
              </thead>
              <tbody>
                {withdrawals.map((w) => (
                  <tr
                    key={w._id}
                    className={`border-t hover:bg-gray-50 transition ${
                      darkMode
                        ? "border-gray-700 hover:bg-gray-700/40"
                        : "border-gray-200"
                    }`}
                    >
                    <td className="py-3 px-4">{w.withdrawalId}</td>
                    <td className="py-3 px-4">₹{w.amount.toFixed(2)}</td>
                    <td className="py-3 px-4">{new Date(w.requestDate).toLocaleDateString('en-IN')}</td>
                    <td className="py-3 px-4">
                      <span
                        className={`px-2 py-1 rounded-full text-xs font-medium ${
                          w.status === "approved"
                            ? "bg-green-100 text-green-700"
                            : w.status === "pending"
                            ? "bg-yellow-100 text-yellow-700"
                            : "bg-red-100 text-red-700"
                        }`}
                      >
                        {w.status.toUpperCase()}
                      </span>
                    </td>
                    <td className="py-3 px-4">
                      {w.status === "rejected" ? (
                        <span className="text-red-500">{w.rejectionReason || w.reason}</span>
                      ) : (
                        <span className="text-gray-500">{w.reason}</span>
                      )}
                    </td>
                    <td className="py-3 px-4">
                      <button
                        onClick={() => downloadReceipt(w)}
                        className="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-xs font-medium transition"
                      >
                        Download
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WalletAndWithdrawl;