import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { selectUser } from "../../redux/slices/authSlice";
import walletService from "../../services/walletService";
import withdrawalService from "../../services/withdrawalService";
import jsPDF from "jspdf";
import { toast } from "react-hot-toast";

const WalletAndWithdrawl = ({ darkMode }) => {
  const user = useSelector(selectUser);
  const [withdrawAmount, setWithdrawAmount] = useState("");
  const [wallet, setWallet] = useState(null);
  const [loading, setLoading] = useState(true);
  const [withdrawals, setWithdrawals] = useState([]);
  const [loadingWithdrawals, setLoadingWithdrawals] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    if (user?._id) {
      fetchWallet();
      fetchWithdrawals();
    }
  }, [user]);

  const fetchWallet = async () => {
    try {
      setLoading(true);
      const response = await walletService.getWalletByUserId(user._id);
      if (response.success) {
        setWallet(response.data);
      }
    } catch (error) {
      console.error("Error fetching wallet:", error);
      toast.error(error.message || "Failed to fetch wallet");
    } finally {
      setLoading(false);
    }
  };

  const fetchWithdrawals = async () => {
    try {
      setLoadingWithdrawals(true);
      const response = await withdrawalService.getWithdrawalsByUserId(user._id, {
        sortBy: "requestDate",
        order: "desc",
      });
      if (response.success) {
        setWithdrawals(response.data.withdrawals);
      }
    } catch (error) {
      console.error("Error fetching withdrawals:", error);
      toast.error(error.message || "Failed to fetch withdrawals");
    } finally {
      setLoadingWithdrawals(false);
    }
  };

  const generateReceipt = (withdrawal) => {
    const canvas = document.createElement("canvas");
    canvas.width = 800;
    canvas.height = 1000;
    const ctx = canvas.getContext("2d");

    ctx.fillStyle = "#ffffff";
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    ctx.fillStyle = "#2563eb";
    ctx.fillRect(0, 0, canvas.width, 120);

    ctx.fillStyle = "#ffffff";
    ctx.font = "bold 36px Arial";
    ctx.textAlign = "center";
    ctx.fillText("WITHDRAWAL RECEIPT", canvas.width / 2, 70);

    ctx.fillStyle = "#1e293b";
    ctx.font = "bold 24px Arial";
    ctx.textAlign = "left";
    ctx.fillText(`Receipt ID: ${withdrawal.withdrawalId}`, 60, 180);

    ctx.font = "bold 20px Arial";
    ctx.fillStyle = "#475569";
    ctx.fillText(`Transaction ID: ${withdrawal._id}`, 60, 215);

    ctx.font = "18px Arial";
    ctx.fillStyle = "#64748b";
    const formattedDate = new Date(withdrawal.requestDate).toLocaleDateString("en-IN");
    ctx.fillText(`Date: ${formattedDate}`, 60, 250);

    ctx.strokeStyle = "#e2e8f0";
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(60, 290);
    ctx.lineTo(740, 290);
    ctx.stroke();

    ctx.fillStyle = "#1e293b";
    ctx.font = "bold 20px Arial";
    ctx.fillText("WITHDRAWAL DETAILS", 60, 340);

    ctx.font = "18px Arial";
    ctx.fillStyle = "#475569";
    ctx.fillText("Amount:", 60, 390);
    ctx.font = "bold 24px Arial";
    ctx.fillStyle = "#2563eb";
    ctx.fillText(`₹${withdrawal.amount.toFixed(2)} INR`, 60, 425);

    ctx.font = "18px Arial";
    ctx.fillStyle = "#475569";
    ctx.fillText("Status:", 60, 480);

    const statusColor =
      withdrawal.status === "approved"
        ? "#22c55e"
        : withdrawal.status === "pending"
        ? "#eab308"
        : "#ef4444";
    ctx.fillStyle = statusColor;
    ctx.fillRect(60, 495, 150, 35);
    ctx.fillStyle = "#ffffff";
    ctx.font = "bold 16px Arial";
    ctx.textAlign = "center";
    ctx.fillText(withdrawal.status.toUpperCase(), 135, 518);
    ctx.textAlign = "left";

    ctx.font = "18px Arial";
    ctx.fillStyle = "#475569";
    ctx.fillText("Reason:", 60, 575);
    ctx.fillStyle = "#1e293b";
    ctx.fillText(withdrawal.reason, 60, 605);

    ctx.strokeStyle = "#e2e8f0";
    ctx.beginPath();
    ctx.moveTo(60, 660);
    ctx.lineTo(740, 660);
    ctx.stroke();

    ctx.fillStyle = "#64748b";
    ctx.font = "16px Arial";
    ctx.textAlign = "center";
    ctx.fillText("This is an automated receipt generated by the system.", canvas.width / 2, 730);
    ctx.fillText("For any queries, please contact support.", canvas.width / 2, 760);

    ctx.fillStyle = "#94a3b8";
    ctx.font = "14px Arial";
    ctx.fillText("Thank you for using our service!", canvas.width / 2, 830);

    ctx.strokeStyle = "#cbd5e1";
    ctx.lineWidth = 3;
    ctx.strokeRect(0, 0, canvas.width, canvas.height);

    return canvas.toDataURL("image/png");
  };

  const downloadReceipt = (withdrawal) => {
    const dataUrl = generateReceipt(withdrawal);
    const link = document.createElement("a");
    link.download = `withdrawal-receipt-${withdrawal.withdrawalId}.png`;
    link.href = dataUrl;
    link.click();
  };

  const handleWithdraw = async () => {
    const amount = parseFloat(withdrawAmount);

    if (!amount || amount <= 0) {
      toast.error("Please enter a valid amount");
      return;
    }

    if (amount < 200) {
      toast.error("Minimum withdrawal amount is ₹200");
      return;
    }

    if (!wallet || wallet.balance < amount) {
      toast.error("Insufficient balance");
      return;
    }

    try {
      setSubmitting(true);
      const response = await withdrawalService.createWithdrawalRequest({
        userId: user._id,
        amount: amount,
        bankDetails: {},
      });

      if (response.success) {
        toast.success("Withdrawal request submitted successfully!");
        setWithdrawAmount("");
        fetchWithdrawals();
      }
    } catch (error) {
      console.error("Error creating withdrawal:", error);
      toast.error(error.message || "Failed to submit withdrawal request");
    } finally {
      setSubmitting(false);
    }
  };

  const renderStatusBadge = (status) => {
    let classes;
    switch (status) {
      case "approved":
        classes = darkMode ? "bg-green-900 text-green-300 border border-green-700" : "bg-green-100 text-green-700 border border-green-200";
        break;
      case "pending":
        classes = darkMode ? "bg-yellow-900 text-yellow-300 border border-yellow-700" : "bg-yellow-100 text-yellow-700 border border-yellow-200";
        break;
      case "rejected":
        classes = darkMode ? "bg-red-900 text-red-300 border border-red-700" : "bg-red-100 text-red-700 border border-red-200";
        break;
      default:
        classes = darkMode ? "bg-gray-700 text-gray-300 border border-gray-600" : "bg-gray-100 text-gray-700 border border-gray-300";
    }
    return (
      <span className={`px-3 py-1.5 rounded-full text-xs font-medium ${classes}`}>
        {status.toUpperCase()}
      </span>
    );
  };

  const parsedAmount = parseFloat(withdrawAmount);
  const isInvalidAmount =
    isNaN(parsedAmount) || parsedAmount < 200 || !wallet || parsedAmount > wallet.balance;

  return (
    <div
      className={`min-h-screen transition-all duration-300 ${
        darkMode ? "bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white" : "bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 text-gray-900"
      }`}
      style={{ paddingTop: "2.5rem", paddingBottom: "4rem" }}
    >
      {/* Animated Background Elements */}
      <div className="absolute top-10 left-10 w-64 h-64 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
      <div className="absolute top-10 right-10 w-64 h-64 bg-yellow-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
      <div className="absolute bottom-10 left-20 w-64 h-64 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>

      <div className="relative z-10 space-y-8">
        {/* Balance Card */}
        <div
          className={`border-2 rounded-2xl p-6 sm:p-8 shadow-lg text-center sm:text-left relative overflow-hidden ${
            darkMode 
              ? "bg-gradient-to-br from-gray-800 to-gray-700 border-purple-500" 
              : "bg-gradient-to-br from-white to-blue-50 border-blue-200"
          }`}
        >
          <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full -translate-y-16 translate-x-16 opacity-20"></div>
          <p className="text-sm text-gray-500 mb-1 relative z-10">Current Available Balance</p>
          {loading ? (
            <h2 className="text-4xl font-semibold mb-1 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">Loading...</h2>
          ) : (
            <>
              <h2 className="text-4xl font-semibold mb-1 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                ₹{wallet?.balance?.toFixed(2) || "0.00"}
              </h2>
              <p className="text-xs text-gray-400">
                Total Earned: ₹{wallet?.totalEarned?.toFixed(2) || "0.00"} | Total Withdrawn: ₹
                {wallet?.totalWithdrawn?.toFixed(2) || "0.00"}
              </p>
            </>
          )}
        </div>

        {/* Withdrawal Section */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Left - Initiate Withdrawal */}
          <div
            className={`border-2 rounded-2xl p-6 sm:p-8 shadow-lg relative overflow-hidden ${
              darkMode 
                ? "bg-gradient-to-br from-gray-800 to-gray-700 border-purple-500" 
                : "bg-gradient-to-br from-white to-indigo-50 border-indigo-200"
            }`}
          >
            <div className="absolute top-4 right-4">
              <span className="px-3 py-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white text-xs font-medium rounded-full">
                QUICK ACTION
              </span>
            </div>
            <h3 className="text-lg font-semibold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">Initiate Withdrawal</h3>
            <label className="block text-sm mb-2 text-gray-500">
              Amount to Withdraw (INR)
            </label>
            <input
              type="text"
              value={withdrawAmount}
              onChange={(e) => setWithdrawAmount(e.target.value)}
              placeholder="e.g., 500.00"
              disabled={submitting}
              className={`w-full p-3 border-2 rounded-md mb-2 text-sm outline-none transition-all ${
                darkMode
                  ? "bg-gray-900 border-gray-600 text-white placeholder-gray-400 focus:border-purple-500"
                  : "bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500"
              } ${submitting ? "opacity-50 cursor-not-allowed" : ""}`}
            />
            <p className="text-xs text-gray-500 mb-4">
              Minimum withdrawal amount: <span className="font-semibold text-blue-600">₹200</span>
            </p>
            <button
              onClick={handleWithdraw}
              disabled={submitting || isInvalidAmount}
              className={`w-full py-3 text-white rounded-md font-medium transition-all duration-300 transform ${
                isInvalidAmount
                  ? "bg-gray-400 cursor-not-allowed"
                  : "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 hover:scale-105 shadow-lg"
              }`}
            >
              {submitting ? "🔄 SUBMITTING..." : "💰 REQUEST WITHDRAWAL"}
            </button>
          </div>

          {/* Right - Important Note */}
          <div
            className={`border-2 rounded-2xl p-6 sm:p-8 shadow-lg relative overflow-hidden ${
              darkMode 
                ? "bg-gradient-to-br from-gray-800 to-gray-700 border-yellow-500" 
                : "bg-gradient-to-br from-white to-amber-50 border-amber-200"
            }`}
          >
            <div className="absolute top-4 right-4">
              <span className="px-3 py-1 bg-gradient-to-r from-amber-500 to-orange-500 text-white text-xs font-medium rounded-full">
                IMPORTANT
              </span>
            </div>
            <h3 className="text-lg font-semibold mb-4 bg-gradient-to-r from-amber-600 to-orange-600 bg-clip-text text-transparent">Important Note</h3>
            <p className="text-sm text-gray-500 leading-relaxed">
              All withdrawal requests are subject to admin review and approval, and will be
              processed within 24–48 hours. <br />
              <br />
              Please ensure your bank details are updated in your profile settings to avoid
              delays.
            </p>
          </div>
        </div>

        {/* Withdrawal History */}
        <div
          className={`border-2 rounded-2xl p-6 sm:p-8 shadow-lg relative overflow-hidden ${
            darkMode 
              ? "bg-gradient-to-br from-gray-800 to-gray-700 border-green-500" 
              : "bg-gradient-to-br from-white to-green-50 border-green-200"
          }`}
        >
          <div className="absolute top-4 right-4">
            <span className="px-3 py-1 bg-gradient-to-r from-green-500 to-emerald-500 text-white text-xs font-medium rounded-full">
              HISTORY
            </span>
          </div>
          <h3 className="text-lg font-semibold mb-4 bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent">Withdrawal History</h3>

          {loadingWithdrawals ? (
            <p className="text-center py-4 text-gray-500">Loading withdrawals...</p>
          ) : withdrawals.length === 0 ? (
            <p className="text-center py-4 text-gray-500">No withdrawal history found</p>
          ) : (
            <>
              <div className="hidden sm:block overflow-x-auto">
                <table className="min-w-full text-sm border-collapse">
                  <thead>
                    <tr
                      className={`text-left ${
                        darkMode 
                          ? "bg-gradient-to-r from-gray-700 to-gray-600 text-gray-200" 
                          : "bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700"
                      }`}
                    >
                      <th className="py-3 px-4 font-semibold whitespace-nowrap">
                        Request ID
                      </th>
                      <th className="py-3 px-4 font-semibold whitespace-nowrap">
                        Amount (INR)
                      </th>
                      <th className="py-3 px-4 font-semibold whitespace-nowrap">Date</th>
                      <th className="py-3 px-4 font-semibold whitespace-nowrap">Status</th>
                      <th className="py-3 px-4 font-semibold whitespace-nowrap">Reason</th>
                      <th className="py-3 px-4 font-semibold whitespace-nowrap">Receipt</th>
                    </tr>
                  </thead>
                  <tbody>
                    {withdrawals.map((w) => (
                      <tr
                        key={w._id}
                        className={`border-t hover:bg-opacity-50 transition-all duration-200 ${
                          darkMode
                            ? "border-gray-700 hover:bg-gray-700"
                            : "border-gray-200 hover:bg-gray-50"
                        }`}
                      >
                        <td className="py-3 px-4 font-medium">{w.withdrawalId}</td>
                        <td className="py-3 px-4 font-semibold text-green-600">₹{w.amount.toFixed(2)}</td>
                        <td className="py-3 px-4">{new Date(w.requestDate).toLocaleDateString("en-IN")}</td>
                        <td className="py-3 px-4">{renderStatusBadge(w.status)}</td>
                        <td className="py-3 px-4">
                          {w.status === "rejected" ? (
                            <span className="text-red-500">
                              {w.rejectionReason || w.reason}
                            </span>
                          ) : (
                            <span className="text-gray-500">{w.reason}</span>
                          )}
                        </td>
                        <td className="py-3 px-4">
                          <button
                            onClick={() => downloadReceipt(w)}
                            className="px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded hover:from-blue-700 hover:to-purple-700 text-xs font-medium transition-all duration-300 transform hover:scale-105 shadow-md"
                          >
                            📥 Download
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {/* Mobile View */}
              <div className="sm:hidden space-y-4">
                {withdrawals.map((w) => (
                  <div
                    key={w._id}
                    className={`p-4 border-2 rounded-lg shadow-md transition-all duration-200 hover:shadow-lg ${
                      darkMode
                        ? "bg-gray-700 border-gray-600 hover:border-purple-500"
                        : "bg-white border-gray-200 hover:border-blue-300"
                    }`}
                  >
                    <div className="flex justify-between items-center mb-2">
                      <p className="font-semibold text-lg text-green-600">
                        ₹{w.amount.toFixed(2)}
                      </p>
                      {renderStatusBadge(w.status)}
                    </div>
                    <p className="text-xs text-gray-500 mb-1">
                      <span className="font-medium">ID:</span> {w.withdrawalId}
                    </p>
                    <p className="text-xs text-gray-500 mb-2">
                      <span className="font-medium">Date:</span>{" "}
                      {new Date(w.requestDate).toLocaleDateString("en-IN")}
                    </p>
                    <p className="text-xs text-gray-500 mb-3">
                      <span className="font-medium">Reason:</span>{" "}
                      {w.status === "rejected" ? (
                        <span className="text-red-400">
                          {w.rejectionReason || w.reason}
                        </span>
                      ) : (
                        w.reason
                      )}
                    </p>
                    <button
                      onClick={() => downloadReceipt(w)}
                      className="w-full py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded hover:from-blue-700 hover:to-purple-700 text-sm font-medium transition-all duration-300 transform hover:scale-105 shadow-md"
                    >
                      📥 Download Receipt
                    </button>
                  </div>
                ))}
              </div>
            </>
          )}
        </div>
      </div>

      {/* Add custom styles for animations */}
      <style jsx>{`
        @keyframes blob {
          0% { transform: translate(0px, 0px) scale(1); }
          33% { transform: translate(30px, -50px) scale(1.1); }
          66% { transform: translate(-20px, 20px) scale(0.9); }
          100% { transform: translate(0px, 0px) scale(1); }
        }
        .animate-blob {
          animation: blob 7s infinite;
        }
        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
      `}</style>
    </div>
  );
};

export default WalletAndWithdrawl;